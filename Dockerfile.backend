FROM node:20

WORKDIR /app

# Setup pnpm first
RUN corepack enable

# copy prisma schema once for generate & runtime
COPY prisma ./prisma
COPY package.json pnpm-lock.yaml ./

# Install all dependencies to ensure build tools are available
RUN pnpm install

# Generate Prisma client at root level with correct schema path
RUN pnpm prisma generate --schema=./prisma/schema.prisma

# Copy the rest of the codebase
COPY . .

# Ensure the server's prisma folder survives .dockerignore
RUN mkdir -p packages/server/prisma
# Copy only the schema + migrations (tiny)
COPY packages/server/prisma/schema.prisma packages/server/prisma/
COPY packages/server/prisma/migrations packages/server/prisma/migrations

# Install system libs only
RUN apt-get update && \
    apt-get install -y --no-install-recommends libstdc++6

# Make sure server dependencies are installed
RUN cd packages/server && pnpm install

# Generate server-specific Prisma client
WORKDIR /app/packages/server
RUN pnpm prisma generate --schema=./prisma/schema.prisma
WORKDIR /app

# Install TypeScript globally
RUN npm install -g typescript

# Build the server
RUN pnpm --filter server run build

# Copy the seed script to scripts directory in the Docker image
RUN mkdir -p /app/packages/server/scripts/
COPY packages/server/scripts/register_rl_model.ts /app/packages/server/scripts/

# Debug: List compiled files
RUN ls -la /app/packages/server/dist
RUN ls -la /app/packages/server/dist/src || echo "src directory not found in dist"
RUN cat /app/packages/server/package.json | grep start

# Set environment variables
ENV DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy?schema=public"

# Switch CMD to production start using the Docker-specific start script
CMD ["pnpm", "--filter", "server", "run", "start:docker"] 