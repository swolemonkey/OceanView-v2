FROM node:20

WORKDIR /app

# Setup pnpm first
RUN corepack enable

# copy prisma schema once for generate & runtime
COPY prisma ./prisma
COPY package.json pnpm-lock.yaml ./

# Install all dependencies to ensure build tools are available
RUN pnpm install

# Generate Prisma client at root level with correct schema path
RUN pnpm prisma generate --schema=./prisma/schema.prisma

# Copy the rest of the codebase
COPY . .

# Install system libs only
RUN apt-get update && \
    apt-get install -y --no-install-recommends libstdc++6

# Make sure server dependencies are installed
RUN cd packages/server && pnpm install

# Generate server-specific Prisma client
RUN pnpm --filter server prisma generate --schema=/app/prisma/schema.prisma

# Install TypeScript globally
RUN npm install -g typescript

# Build the server
RUN pnpm --filter server run build

# --- Build React UI ---
WORKDIR /app/packages/ui
RUN pnpm install --frozen-lockfile && pnpm build

# Return to app directory
WORKDIR /app

# Copy seed scripts to the scripts directory in the Docker image
RUN mkdir -p /app/scripts/
COPY scripts/seedAll.ts /app/scripts/
COPY scripts/register_rl_model.ts /app/scripts/

# Debug: List compiled files
RUN ls -la /app/packages/server/dist
RUN ls -la /app/packages/server/dist/src || echo "src directory not found in dist"
RUN ls -la /app/packages/ui/dist || echo "UI dist directory not found"
RUN cat /app/packages/server/package.json | grep start

# Set environment variables
ENV DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy?schema=public"

# Switch CMD to production start using the Docker-specific start script
CMD ["pnpm", "--filter", "server", "run", "start:docker"] 