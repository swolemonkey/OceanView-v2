# ───────────────────────────────────────────────────────────
# 1. Base image + workspace
FROM node:20 AS build
WORKDIR /app
RUN corepack enable   # enables pnpm

# System dependencies
RUN apt-get update && \
    # tools prisma/onnxruntime want at *build* time
    apt-get install -y --no-install-recommends \
        git openssl build-essential python3 && \
    rm -rf /var/lib/apt/lists/*

## 2. Copy all workspace manifests BEFORE install
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./
COPY .npmrc ./
COPY patches ./patches/
COPY packages/server/package.json packages/server/
COPY packages/ui/package.json packages/ui/
COPY packages/server/prisma/schema.prisma packages/server/prisma/

## 3. Single workspace-aware install
RUN pnpm install --frozen-lockfile

## 4. Copy full source *after* deps to keep cache efficient
COPY . .

## 5. Generate Prisma client & build
RUN pnpm --filter @oceanview/server prisma generate
RUN pnpm --filter @oceanview/server run build
RUN pnpm --filter @oceanview/ui run build

# Create production build with only required dependencies
RUN pnpm --filter @oceanview/server install --prod --frozen-lockfile

# ---------- 2️⃣  Runtime stage ----------
FROM node:20-slim

WORKDIR /app
RUN apt-get update && \
    # runtime libs prisma / onnxruntime need
    apt-get install -y --no-install-recommends openssl libstdc++6 && \
    rm -rf /var/lib/apt/lists/*

RUN corepack enable

ENV NODE_ENV=production \
    PORT=3334

# ——— copy artefacts from build stage ———
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/packages/server/dist ./packages/server/dist
COPY --from=build /app/packages/server/package.json ./packages/server/
COPY --from=build /app/packages/server/prisma ./packages/server/prisma
COPY --from=build /app/packages/ui/dist ./packages/ui/dist
COPY .npmrc package.json pnpm-workspace.yaml ./
# Optional: include patch-package diffs so you can inspect them later
COPY patches ./patches/

# no npm/pnpm install here – everything's baked in
EXPOSE 3334

## 6. Entrypoint
CMD ["pnpm","--filter","@oceanview/server","run","start:docker"] 