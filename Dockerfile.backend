# ---------- 1️⃣  Build stage ----------
FROM node:20-slim AS build

WORKDIR /app
RUN apt-get update && \
    # tools prisma/onnxruntime want at *build* time
    apt-get install -y --no-install-recommends \
        git openssl build-essential python3 && \
    rm -rf /var/lib/apt/lists/*

RUN corepack enable

# 1. metadata first  –> cache win
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY .npmrc ./
COPY patches ./patches/
COPY packages/*/package.json ./packages/*/
COPY packages/server/prisma/schema.prisma ./packages/server/prisma/

# 2. full install (incl. devDeps) + patch-package + onnx fixes
RUN pnpm install --no-frozen-lockfile

# 3. generate Prisma client **once**
RUN pnpm exec prisma generate --schema packages/server/prisma/schema.prisma

# 4. copy sources & build TS
COPY . .
# Create a temporary tsconfig that forces emitting JS even with errors
RUN cd packages/server && rm -rf dist && \
    echo '{"extends":"./tsconfig.json","compilerOptions":{"noEmitOnError":false}}' > tsconfig.build.json && \
    (npx tsc -p tsconfig.build.json || true)

# ---------- 2️⃣  Runtime stage ----------
FROM node:20-slim

WORKDIR /app
RUN apt-get update && \
    # runtime libs prisma / onnxruntime need
    apt-get install -y --no-install-recommends openssl libstdc++6 && \
    rm -rf /var/lib/apt/lists/*

RUN corepack enable

ENV NODE_ENV=production \
    PORT=3334

# Copy package.json files and workspace config
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY .npmrc ./
COPY patches ./patches/
COPY packages/server/package.json ./packages/server/

# Copy built JS code
COPY --from=build /app/packages/server/dist ./packages/server/dist
COPY --from=build /app/packages/server/prisma ./packages/server/prisma

# Install only production dependencies
RUN pnpm install --prod --filter=server

# no npm/pnpm install here – everything's baked in
EXPOSE 3334
# The command is defined in fly.toml 