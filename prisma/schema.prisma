datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Experience {
  id        Int      @id @default(autoincrement())
  symbol    String
  price     Float
  smcThresh Float
  rsiOS     Float
  reward    Float
  ts        DateTime @default(now())
}

model HyperSettings {
  id            Int      @id @default(1)
  smcThresh     Float    @default(0.002)
  rsiOS         Float    @default(35)
  rsiOB         Float    @default(65)
  symbols       String   @default("bitcoin")
  riskPct       Float    @default(1)
  smcMinRetrace Float    @default(0.5)
  maxDailyLoss  Float    @default(0.03)
  maxOpenRisk   Float    @default(0.05)
  updatedAt     DateTime @updatedAt
  strategyParams String   @default("{}")
  strategyToggle String   @default("{\"TrendFollowMA\":true,\"RangeBounce\":true}")
}

model StrategyVersion {
  id          Int          @id @default(autoincrement())
  hash        String       @unique
  description String
  trades      StrategyTrade[]
  metrics     DailyMetric[]
}

model StrategyTrade {
  id                Int      @id @default(autoincrement())
  symbol            String
  side              String
  qty               Float
  price             Float
  fee               Float    @default(0)
  pnl               Float
  entryTs           DateTime
  ts                DateTime @default(now())
  botName           String
  strategyVersionId Int
  strategyVersion   StrategyVersion @relation(fields: [strategyVersionId], references: [id])
}

model DailyMetric {
  date              DateTime
  symbol            String
  strategyVersionId Int
  botName           String
  trades            Int
  grossPnl          Float
  netPnl            Float
  winRate           Float
  sharpe            Float
  maxDrawdown       Float
  strategyVersion   StrategyVersion @relation(fields: [strategyVersionId], references: [id])

  @@id([date, symbol, strategyVersionId])
  @@map("daily_metrics")
}

model PortfolioMetric {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  equityStart Float
  equityEnd   Float
  dailyPnl    Float
  maxOpenRisk Float
  maxDrawdown Float
}

model RLModel {
  id          Int      @id @default(autoincrement())
  version     String   @unique
  path        String
  description String?
  createdAt   DateTime @default(now())
  dataset     RLDataset[]
}

model RLDataset {
  id           Int      @id @default(autoincrement())
  symbol       String
  ts           DateTime @default(now())
  featureVec   String   // JSON stored as string
  action       String   // 'buy' or 'skip'
  outcome      Float    // P&L
  gateScore    Float?   // Score from gatekeeper
  strategyVersionId Int?
  modelId      Int?
  model        RLModel? @relation(fields: [modelId], references: [id])
  
  @@index([symbol, ts]) // Index for faster lookups when updating outcome
}

// Account state for equity bootstrapping
model AccountState {
  id         Int      @id @default(autoincrement())
  equity     Float
  updatedAt  DateTime @default(now()) @updatedAt
}

// Symbol registry to track asset types
model SymbolRegistry {
  id         Int      @id @default(autoincrement())
  symbol     String   @unique
  assetClass String   // 'crypto', 'equity', 'forex', etc.
  exchange   String?  // Optional exchange identifier
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Bot model for forkManager
model Bot {
  id       Int      @id @default(autoincrement())
  name     String
  type     String   @default("hypertrades")
  enabled  Boolean  @default(true)
  parentId Int?
  equity   Float    @default(10000)
  pnlToday Float    @default(0)
  ts       DateTime @default(now())
}

// Metric model for bot performance tracking
model Metric {
  id     Int      @id @default(autoincrement())
  botId  Int
  equity Float
  pnl    Float
  date   DateTime @default(now())
}

// Evolution metric for strategy parameter optimization
model EvolutionMetric {
  id          Int      @id @default(autoincrement())
  parentId    Int
  childId     Int
  sharpe      Float
  drawdown    Float
  promoted    Boolean  @default(false)
  childParams String
  ts          DateTime @default(now())
}

model NewsSentiment {
  id       Int      @id @default(autoincrement())
  symbol   String
  score    Float    // -1 â€¦ +1
  source   String
  ts       DateTime @default(now())
}

model OrderBookMetric {
  id       Int      @id @default(autoincrement())
  symbol   String
  bidVol   Float
  askVol   Float
  imbalance Float    // (bid-ask)/(bid+ask)
  ts       DateTime @default(now())
}

model BotHeartbeat {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  status    String   // "ok" or "alert"
  details   String?
}

// Order model for execution tracking
model Order {
  id              Int      @id @default(autoincrement())
  symbol          String
  side            String   // buy or sell
  type            String   // market, limit, etc.
  qty             Float
  price           Float?   // Null for market orders until filled
  status          String   // pending, filled, cancelled, rejected
  exchange        String?  // Exchange where order was placed
  exchangeOrderId String?  // ID from exchange
  clientOrderId   String?  // Client-generated order ID
  botId           Int      // Bot that placed the order
  fee             Float?
  ts              DateTime @default(now())
  fillTs          DateTime? // When the order was filled
  trades          Trade[]  // Related trade executions
}

// Trade model for partial fills and executions
model Trade {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  symbol      String
  side        String   // buy or sell
  qty         Float    // Partial fill quantity
  price       Float    // Execution price
  fee         Float?   // Fee for this execution
  ts          DateTime @default(now())
  exchangeTradeId String?
  strategy    String?  // Strategy that generated the trade
} 