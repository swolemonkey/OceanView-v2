datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Price1m {
  id        Int      @id @default(autoincrement())
  symbol    String
  timestamp DateTime
  open      Decimal
  high      Decimal
  low       Decimal
  close     Decimal
  volume    Decimal
  @@index([symbol, timestamp])
  @@unique([symbol, timestamp], name: "symbol_timestamp")
}

model Order {
  id Int @id @default(autoincrement())
  symbol String
  side String // 'buy' | 'sell'
  qty Decimal
  price Decimal
  status String @default("filled") // sim always fills
  createdAt DateTime @default(now())
  type String @default("market") // Adding 'type' field
  exchangeOrderId String? // Adding exchangeOrderId field
  botId Int? // Add botId field
  exchange String? // Add exchange field
  clientOrderId String? // Add clientOrderId field
  
  trades Trade[]
}

model Trade {
  id Int @id @default(autoincrement())
  orderId Int
  symbol String
  side String
  qty Decimal
  price Decimal
  feePaid Decimal @default(0)
  pnl Decimal? // Make pnl optional
  ts DateTime @default(now())
  botId Int? // Adding botId field
  fee Decimal? // Adding fee field
  externalId String? // Add externalId field
  strategy String? // Add strategy field
  exchangeTradeId String? // Add exchangeTradeId field

  Order Order @relation(fields:[orderId], references:[id])
}

model Bot {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  type      String    @default("scalper") // 'scalper', 'hypertrades', etc.
  enabled   Boolean   @default(true)
  equity    Float     @default(10000)
  pnlToday  Float     @default(0)
  parentId  Int?
  createdAt DateTime  @default(now())
  metrics   Metric[]
}

model Metric {
  id        Int      @id @default(autoincrement())
  botId     Int
  date      DateTime @default(now())
  equity    Float
  pnl       Float
  
  bot       Bot      @relation(fields: [botId], references: [id])
}

model StrategyVersion {
  id        Int      @id @default(autoincrement())
  hash      String   @unique       // git commit or config hash
  createdAt DateTime @default(now())
  description String?
  trades    StrategyTrade[]
  metrics   DailyMetric[]
}

model StrategyTrade {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  botName   String
  strategyVersionId Int
  symbol    String    // buy | sell
  side      String
  price     Float
  size      Float
  entryReason String
  exitReason  String?
  pnl       Float
  durationMs Int
  @@index([symbol, ts])
  StrategyVersion StrategyVersion @relation(fields: [strategyVersionId], references: [id])
}

model DailyMetric {
  id        Int      @id @default(autoincrement())
  date      DateTime
  strategyVersionId Int
  botName   String
  symbol    String   @default("")  // Adding this field
  trades    Int
  grossPnl  Float
  netPnl    Float
  winRate   Float
  sharpe    Float
  maxDrawdown Float
  StrategyVersion StrategyVersion @relation(fields: [strategyVersionId], references: [id])
  
  @@unique([date, symbol, strategyVersionId], name: "date_symbol_strategyVersionId")
}

model HyperSettings {
  id        Int      @id @default(1)
  smcThresh Float    @default(0.003)
  rsiOS     Float    @default(30)
  rsiOB     Float    @default(70)
  riskPct   Float    @default(1.2)
  symbols   String   @default("bitcoin") // commaâ€‘sep list e.g. "bitcoin,ethereum,solana"
  atrMultiple Float  @default(2.0) // ATR multiple for trailing stops - increased from 1.5
  atrPeriod Int      @default(14)  // ATR period for volatility calculation
  gatekeeperThresh Float  @default(0.62)
  maxDailyLoss      Float @default(0.04) // Increased from 0.03
  maxOpenRisk       Float @default(0.07) // Increased from 0.05
  fastMAPeriod      Int   @default(50)
  slowMAPeriod      Int   @default(200)
  updatedAt DateTime @updatedAt
  strategyParams   String   @default("{}")
  strategyToggle   String   @default("{\"TrendFollowMA\":true,\"RangeBounce\":true}")
  smcMinRetrace    Float    @default(0.5)
}

model PortfolioMetric {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  equityStart Float
  equityEnd   Float
  dailyPnl    Float
  maxOpenRisk Float
  maxDrawdown Float
}

model RLModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  version   String   @unique
  path      String
  description String?
  dataset   RLDataset[]
}

model RLDataset {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  symbol    String
  featureVec String   // JSON string representation
  action    String  // buy|sell|skip
  outcome   Float   // realised pnl
  strategyVersionId Int?
  gateScore Float?
  modelId   Int?
  model     RLModel? @relation(fields: [modelId], references: [id])
  
  @@index([symbol, ts])
}

model AccountState {
  id      Int     @id @default(autoincrement())
  equity  Float
  updated DateTime @updatedAt
}

// New models for Sprint 9

model BotHeartbeat {
  id      Int      @id @default(autoincrement())
  ts      DateTime @default(now())
  status  String   // 'ok', 'alert', 'critical'
  details String?
}

model NewsSentiment {
  id      Int      @id @default(autoincrement())
  ts      DateTime @default(now())
  source  String
  score   Float    // -1 to 1, where 1 is positive
  articles Int
  @@index([ts])
}

model OrderBookMetric {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  symbol    String
  imbalance Float    // -1 to 1, where 1 is buy pressure
  depth     Int      // number of levels used
  bidVol    Float?
  askVol    Float?
  @@index([symbol, ts])
}

model SymbolRegistry {
  id         Int      @id @default(autoincrement())
  symbol     String   @unique
  assetClass String
  exchange   String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EvolutionMetric {
  id          Int      @id @default(autoincrement())
  parentId    Int
  childId     Int
  sharpe      Float
  drawdown    Float
  promoted    Boolean  @default(false)
  childParams String   // JSON string of parameters
  createdAt   DateTime @default(now())
}

model Experience {
  id        Int      @id @default(autoincrement())
  symbol    String
  price     Float
  smcThresh Float
  rsiOS     Float
  reward    Float
  ts        DateTime @default(now())
} 
model TradableAsset {
  id         Int     @id @default(autoincrement())
  symbol     String  @unique
  assetClass String
  active     Boolean @default(true)
}
