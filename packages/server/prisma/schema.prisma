datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Price1m {
  id        Int      @id @default(autoincrement())
  symbol    String
  timestamp DateTime
  open      Decimal
  high      Decimal
  low       Decimal
  close     Decimal
  volume    Decimal
  @@index([symbol, timestamp])
}

model Order {
  id Int @id @default(autoincrement())
  symbol String
  side String // 'buy' | 'sell'
  qty Decimal
  price Decimal
  status String @default("filled") // sim always fills
  createdAt DateTime @default(now())
  
  trades Trade[]
}

model Trade {
  id Int @id @default(autoincrement())
  orderId Int
  symbol String
  side String
  qty Decimal
  price Decimal
  feePaid Decimal @default(0)
  pnl Decimal
  ts DateTime @default(now())

  Order Order @relation(fields:[orderId], references:[id])
}

model Bot {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  type      String    @default("scalper") // 'scalper', 'hypertrades', etc.
  enabled   Boolean   @default(true)
  equity    Float     @default(10000)
  pnlToday  Float     @default(0)
  parentId  Int?
  createdAt DateTime  @default(now())
  metrics   Metric[]
}

model Metric {
  id        Int      @id @default(autoincrement())
  botId     Int
  date      DateTime @default(now())
  equity    Float
  pnl       Float
  
  bot       Bot      @relation(fields: [botId], references: [id])
}

model StrategyVersion {
  id        Int      @id @default(autoincrement())
  hash      String   @unique       // git commit or config hash
  createdAt DateTime @default(now())
  description String?
  trades    StrategyTrade[]
  metrics   DailyMetric[]
}

model StrategyTrade {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  botName   String
  strategyVersionId Int
  symbol    String    // buy | sell
  side      String
  price     Float
  size      Float
  entryReason String
  exitReason  String?
  pnl       Float
  durationMs Int
  @@index([symbol, ts])
  StrategyVersion StrategyVersion @relation(fields: [strategyVersionId], references: [id])
}

model DailyMetric {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  strategyVersionId Int
  botName   String
  trades    Int
  grossPnl  Float
  netPnl    Float
  winRate   Float
  sharpe    Float
  maxDrawdown Float
  StrategyVersion StrategyVersion @relation(fields: [strategyVersionId], references: [id])
}

model HyperSettings {
  id        Int      @id @default(1)
  smcThresh Float    @default(0.002)
  rsiOS     Float    @default(35)
  riskPct   Float    @default(1)
  symbols   String   @default("bitcoin") // commaâ€‘sep list e.g. "bitcoin,ethereum,solana"
  atrMultiple Float  @default(1.5) // ATR multiple for trailing stops
  atrPeriod Int      @default(14)  // ATR period for volatility calculation
  updatedAt DateTime @updatedAt
}

model PortfolioMetric {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  equityStart Float
  equityEnd   Float
  dailyPnl    Float
  maxOpenRisk Float
  maxDrawdown Float
}

model RLModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  version   String   @unique
  path      String
  description String?
}

model RLDataset {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  symbol    String
  featureVec String   // JSON string representation
  action    String  // buy|sell|skip
  outcome   Float   // realised pnl
  strategyVersionId Int
}

model AccountState {
  id      Int     @id @default(autoincrement())
  equity  Float
  updated DateTime @updatedAt
}

// New models for Sprint 9

model BotHeartbeat {
  id      Int      @id @default(autoincrement())
  ts      DateTime @default(now())
  status  String   // 'ok', 'alert', 'critical'
  details String?
}

model NewsSentiment {
  id      Int      @id @default(autoincrement())
  ts      DateTime @default(now())
  source  String
  score   Float    // -1 to 1, where 1 is positive
  articles Int
  @@index([ts])
}

model OrderBookMetric {
  id        Int      @id @default(autoincrement())
  ts        DateTime @default(now())
  symbol    String
  imbalance Float    // -1 to 1, where 1 is buy pressure
  depth     Int      // number of levels used
  @@index([symbol, ts])
} 