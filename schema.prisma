generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Experience {
  id        Int      @id @default(autoincrement())
  symbol    String
  price     Float
  smcThresh Float
  rsiOS     Float
  reward    Float
  ts        DateTime @default(now())
}

model HyperSettings {
  id               Int      @id @default(autoincrement())
  smcThresh        Float    @default(0.002)
  rsiOS            Float    @default(35)
  rsiOB            Float    @default(65)
  symbols          String   @default("bitcoin")
  riskPct          Float    @default(1)
  smcMinRetrace    Float    @default(0.5)
  maxDailyLoss     Float    @default(0.03)
  maxOpenRisk      Float    @default(0.05)
  gatekeeperThresh Float    @default(0.55)
  atrMultiple      Float    @default(1.5)
  atrPeriod        Int      @default(14)
  updatedAt        DateTime @updatedAt
  strategyParams   String   @default("{}")
  strategyToggle   String   @default("{\"TrendFollowMA\":true,\"RangeBounce\":true}")
}

model StrategyVersion {
  id          Int             @id @default(autoincrement())
  hash        String          @unique
  description String
  trades      StrategyTrade[]
  metrics     DailyMetric[]
}

model StrategyTrade {
  id                Int             @id @default(autoincrement())
  symbol            String
  side              String
  qty               Float
  price             Float
  fee               Float           @default(0)
  pnl               Float
  entryTs           DateTime
  ts                DateTime        @default(now())
  botName           String
  strategyVersionId Int
  strategyVersion   StrategyVersion @relation(fields: [strategyVersionId], references: [id])
}

model DailyMetric {
  date              DateTime
  symbol            String
  strategyVersionId Int
  botName           String
  trades            Int
  grossPnl          Float
  netPnl            Float
  winRate           Float
  sharpe            Float
  maxDrawdown       Float
  strategyVersion   StrategyVersion @relation(fields: [strategyVersionId], references: [id])

  @@id([date, symbol, strategyVersionId])
  @@map("daily_metrics")
}

model PortfolioMetric {
  id          Int      @id @default(autoincrement())
  date        DateTime @unique
  equityStart Float
  equityEnd   Float
  dailyPnl    Float
  maxOpenRisk Float
  maxDrawdown Float
}

model RLModel {
  id          Int         @id @default(autoincrement())
  version     String      @unique
  path        String
  description String?
  createdAt   DateTime    @default(now())
  dataset     RLDataset[]
}

model RLDataset {
  id                Int      @id @default(autoincrement())
  symbol            String
  ts                DateTime @default(now())
  featureVec        String
  action            String
  outcome           Float
  gateScore         Float?
  strategyVersionId Int?
  modelId           Int?
  model             RLModel? @relation(fields: [modelId], references: [id])

  @@index([symbol, ts])
}

model AccountState {
  id        Int      @id @default(autoincrement())
  equity    Float
  updatedAt DateTime @default(now()) @updatedAt
}

model SymbolRegistry {
  id         Int      @id @default(autoincrement())
  symbol     String   @unique
  assetClass String
  exchange   String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Bot {
  id       Int      @id @default(autoincrement())
  name     String
  type     String   @default("hypertrades")
  enabled  Boolean  @default(true)
  parentId Int?
  equity   Float    @default(10000)
  pnlToday Float    @default(0)
  ts       DateTime @default(now())
}

model Metric {
  id     Int      @id @default(autoincrement())
  botId  Int
  equity Float
  pnl    Float
  date   DateTime @default(now())
}

model EvolutionMetric {
  id          Int      @id @default(autoincrement())
  parentId    Int
  childId     Int
  sharpe      Float
  drawdown    Float
  promoted    Boolean  @default(false)
  childParams String
  ts          DateTime @default(now())
}

model NewsSentiment {
  id     Int      @id @default(autoincrement())
  symbol String
  score  Float
  source String
  ts     DateTime @default(now())
}

model OrderBookMetric {
  id        Int      @id @default(autoincrement())
  symbol    String
  bidVol    Float
  askVol    Float
  imbalance Float
  ts        DateTime @default(now())
}

model BotHeartbeat {
  id      Int      @id @default(autoincrement())
  ts      DateTime @default(now())
  status  String
  details String?
}

model Order {
  id              Int       @id @default(autoincrement())
  symbol          String
  side            String
  type            String
  qty             Float
  price           Float?
  status          String
  exchange        String?
  exchangeOrderId String?
  clientOrderId   String?
  botId           Int
  fee             Float?
  ts              DateTime  @default(now())
  fillTs          DateTime?
  trades          Trade[]
}

model Trade {
  id              Int      @id @default(autoincrement())
  orderId         Int
  order           Order    @relation(fields: [orderId], references: [id])
  symbol          String
  side            String
  qty             Float
  price           Float
  fee             Float?
  ts              DateTime @default(now())
  exchangeTradeId String?
  strategy        String?
}

model price1m {
  id       Int      @id @default(autoincrement())
  ts       DateTime @map("ts")
  symbol   String
  usd      Float
  
  @@unique([symbol, ts], name: "symbol_ts")
  @@index([symbol, ts])
}
