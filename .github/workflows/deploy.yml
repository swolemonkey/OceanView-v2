name: Fly Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: Which Fly app to deploy?
        required: true
        default: staging
        type: choice
        options: 
          - staging
          - prod

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  # Default ‚Äì overridden per-job via matrix
  FLY_APP_NAME: ocean-staging

jobs:
  test-build-deploy:
    concurrency: deploy-group
    runs-on: ubuntu-latest
    # matrix lets us reuse the same steps for staging (default) and prod (when triggered manually)
    strategy:
      matrix:
        include:
          - envName: staging
            flyApp: ocean-staging
          # uncomment when ready for prod cut-over
          # - envName: prod
          #   flyApp: oceanview-prod
    steps:
      - uses: actions/checkout@v4

      # üí° 1Ô∏è‚É£  Install dependencies
      - uses: pnpm/action-setup@v2
        with: { version: 9 }
        
      # Block onnxruntime postinstall script
      - name: Block onnxruntime postinstall
        run: npm pkg set scripts.postinstall="echo skipped"
        working-directory: packages/server/node_modules/onnxruntime-node || true
        
      - run: pnpm install --frozen-lockfile
        env:
          npm_config_onnxruntime_gpu: "false"  # Force CPU variant of ONNX runtime
          
      # Manually download and extract ONNX Runtime CPU binary
      - name: Download onnxruntime CPU binary
        run: |
          curl -L https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime/nuget/v3/flatcontainer/microsoft.ml.onnxruntime.linux-x64/1.22.0/microsoft.ml.onnxruntime.linux-x64.1.22.0.nupkg -o ort.nupkg
          unzip -q ort.nupkg -d ort-extract
          mkdir -p node_modules/onnxruntime-node/bin
          cp ort-extract/runtimes/linux-x64/native/libonnxruntime.so node_modules/onnxruntime-node/bin/
      
      # üí° 2Ô∏è‚É£  Run database migrations
      - run: pnpm prisma migrate deploy
      
      # üí° 3Ô∏è‚É£  Build the application
      - run: pnpm build
      
      # Run tests and linting
      - run: pnpm test --filter server
      - run: pnpm run lint

      # Set the app name for this matrix entry
      - name: Set Fly App
        run: echo "FLY_APP_NAME=${{ matrix.flyApp }}" >> $GITHUB_ENV

      # üí° 4Ô∏è‚É£  Deploy via remote builder (uses Dockerfile.backend)
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Fly Deploy ${{ matrix.flyApp }}
        run: flyctl deploy --remote-only --app $FLY_APP_NAME

      # Run seed script once the app is up (SQLite schema & seeds)
      - name: DB seed
        run: flyctl ssh console -C "pnpm ts-node scripts/seedAll.ts" --app $FLY_APP_NAME 